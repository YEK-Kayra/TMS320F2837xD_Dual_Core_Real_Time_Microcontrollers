
#include "stdio.h"
#include "stdlib.h"
#include "string.h"

#include "device.h"
#include "driverlib.h"
#include "F28x_Project.h"
#include "F2837xD_device.h"
#include "F2837xD_Examples.h"

#define EX_ADC_RESULATION 16

void configADC(Uint32 ADC_Base);
void initADC_SOC(void);


void main(void){

    Device_init();
    Device_initGPIO();

    Interrupt_initModule();
    Interrupt_initVectorTable();

    configADC(ADC_Base);
    initADC_SOC();

    EINT;
    ERTM;

    while(1){




    }



}


void configADC(Uint32 ADC_Base){

    //Enable Protected Register Access
    EALLOW;

    //Default clock freq. is 200MHz
    //We use port of A for ADC
    ADC_setPrescaler(ADCA_BASE, ADC_CLK_DIV_4_0);

#if(EX_ADC_RESULATION == 12)
    {
    ADC_setMode(base, resolution, signalMode);
    }
#elif(EX_ADC_RESULATION == 16)
    {
    ADC_setMode(base, resolution, signalMode);
    }

#endif

ADC_setInterruptPulseMode(base, pulseMode);
ADC_enableConverter(base);
DEVICE_DELAY_US(1000);

    //Disable Protected Register Access
    EDIS;
}



void initADC_SOC(void){

#if(EX_ADC_RESULATION == 12)
    {
     ADC_setupSOC(base, socNumber, trigger, channel, sampleWindow);
     ADC_setupSOC(base, socNumber, trigger, channel, sampleWindow);
     ADC_setupSOC(base, socNumber, trigger, channel, sampleWindow);
    }
#elif(EX_ADC_RESULATION == 16)
    {
     ADC_setupSOC(base, socNumber, trigger, channel, sampleWindow);
    }
#endif

    ADC_setInterruptSource(base, adcIntNum, intTrigger);
    ADC_setInterruptSource(base, adcIntNum, intTrigger);
    ADC_setInterruptSource(base, adcIntNum, intTrigger);


    ADC_enableInterrupt(base, adcIntNum);

    ADC_clearInterruptStatus(base, adcIntNum);

}
